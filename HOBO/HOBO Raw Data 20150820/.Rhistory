write.csv(extract(PLP500,plotsSP.ta), "PLP500.csv")
source_https('https://raw.githubusercontent.com/dackerly/PepperwoodVegPlots/master/Analyses/PWfunctions_GitHub.R')
source_https <- function(url, ...) {
# parse and evaluate each .R script
sapply(c(url, ...), function(u) {
eval(parse(text = getURL(u, followlocation = TRUE, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))), envir = .GlobalEnv)
})
}
source_https('https://raw.githubusercontent.com/dackerly/PepperwoodVegPlots/master/Analyses/PWfunctions_GitHub.R')
x<-get.clim.pts()
head(x)
clim<-get.clim.pts()
clim.all<-merge(clim,hobo,by="Plot",all.x=T)
source('~/.active-rstudio-document', echo=TRUE)
head(clim.all)
clim.sub<-clim.all[,c(2,6:13,16,18)]
test<-princomp(clim.sub, cor=T)
biplot(test, cex=.7,col=c("black","forestgreen"))
head(clim.all)
clim.sub<-clim.all[,c(2,6:13,16,17, 19)]
test<-princomp(clim.sub, cor=T)
biplot(test, cex=.7,col=c("black","forestgreen"))
colnames(clim.all)
clim.sub<-clim.all[,c(2,8,10:13,16,17,19)]
colnames(clim.sub)<-c("DEM","TPI","AET","CWD","PET", "MIN.T","MAX.T","SM")
test<-princomp(clim.sub, cor=T)
par(mar=c(4,3,4,3))
biplot(test, cex=.7,col=c("black","forestgreen"))
clim.sub<-clim.all[,c(2,8,10:13,16,17,19)]
colnames(clim.sub)<-c("DEM","TPI","PLP","AET","CWD","PET", "MIN.T","MAX.T","SM")
test<-princomp(clim.sub, cor=T)
par(mar=c(4,3,4,3))
biplot(test, cex=.7,col=c("black","forestgreen"))
summary(test)
clim.sub<-clim.all[,c(2,6,8,10:13,16,17,19)]
colnames(clim.sub)<-c("DEM", "TOPOID","TPI","PLP","AET","CWD","PET", "MIN.T","MAX.T","SM")
test<-princomp(clim.sub, cor=T)
par(mar=c(4,3,4,3))
biplot(test, cex=.7,col=c("black","forestgreen"))
summary(test)
varimax(test)
?verimax
?varimax
test<-princomp(clim.sub, cor=T)
par(mar=c(4,3,4,3))
varimax(test)
varimax(scores(test))
plot(varimax(scores(test)))
variomax(clim.sub)
varimax(clim.sub)
par(mar=c(4,3,4,3))
biplot(test, cex=.7,col=c("black","forestgreen"))
par(mar=c(5.1, 4.1, 4.1, 5.1))
score.test<-as.data.frame(scores(test))
ASPECT<-score.test$Comp.1
ELE<-score.test$Comp.2
tr.ba<-aggregate(Basal.Area~Species, data=tr.df,FUN=sum)
tr.ba<-subset(tr.ba,subset=(tr.ba$Species!="QUEDEC" & tr.ba$Species!="QUEAGKE"))
sac<-aggregate(Total.Number~Species, data=seju.df,FUN=sum)
both<-merge(sac,tr.ba,by="Species",all.x=T)
both[is.na(both$Basal.Area), "Basal.Area"]<-0
both<-both[order(both$Basal.Area),]
par(mfrow=c(1,2))
barplot(height=both$Basal.Area, names = both$Species,cex.names=.7, horiz=T,las=2,col="black",main="Tree Basal Area")
barplot(height=both$Total.Number, names = both$Species,cex.names=.7, horiz=T,las=2,col="black",main="Regeneration Count")
par(mfrow=c(1,1))
dist.ax1<-dist(ASPECT)
dist.ax2<-dist(ELE)
dist.tr<-vegdist(tr,method = "bray")
dist.seju<-vegdist(seju, method="bray")
distance<- dist(clim[,11:12])
mantel(dist.ax1,distance,permutations = 10000)
mantel(dist.ax2,distance,permutations = 10000)
mantel(dist.ax1,dist.ax2,permutations = 10000)
mantel(dist.ax2,distance,permutations = 10000)
mantel(dist.ax1,distance,permutations = 10000)
mantel(distance,dist.seju,permutations = 10000)
mantel(distance,dist.tr,permutations = 10000)
mantel(dist.ax1,dist.tr,permutations = 10000)
mantel(dist.ax2,dist.tr,permutations = 10000)
mantel(dist.ax1,dist.seju,permutations = 10000)
mantel(dist.ax2,dist.seju,permutations = 10000)
mantel(dist.tr, dist.seju,permutations = 10000)
rda.dec<-capscale(tr ~ ASPECT + ELE + DEC + (scores(pcnm(distance))),distance="bray",sqrt.dist = TRUE)
summary(rda.dec)
anova(rda.dec, by = "term", permu = 10000)
rda.dec.R<-RsquareAdj(rda.dec)
rda.dec.R
ordiplot(rda.dec,type="n")
orditorp(rda.dec,display="sites",pch=19,col="gray",label=F)
orditorp(rda.dec,display="species",col="forestgreen")
text(rda.dec,display="bp",select=c(T,F,T,rep(F,32)),labels =c("ASPECT","ELEVATION","DEC",rep("DISTANCE",32)))
c(T,F,T,rep(F,32))
DEC
rda.dec<-capscale(tr ~ ASPECT + ELE + DEC + (scores(pcnm(distance))),distance="bray",sqrt.dist = TRUE)
summary(rda.dec)
anova(rda.dec, by = "term", permu = 10000)
ordiplot(rda.dec,type="n")
orditorp(rda.dec,display="sites",pch=19,col="gray",label=F)
orditorp(rda.dec,display="species",col="forestgreen")
text(rda.dec,display="bp",select=c(T,F,T,rep(F,32)),labels =c("ASPECT","ELEVATION","DEC",rep("DISTANCE",32)))
rep("DISTANCE",32)
c(T,F,T,rep(F,32))
c("ASPECT","ELEVATION","DEC",rep("DISTANCE",32)
)
rda.dec<-capscale(tr ~ ASPECT + ELE + DEC + (scores(pcnm(distance))),distance="bray",sqrt.dist = TRUE)
summary(rda.dec)
anova(rda.dec, by = "term", permu = 10000)
rda.dec.R<-RsquareAdj(rda.dec)
ordiplot(rda.dec,type="n")
orditorp(rda.dec,display="sites",pch=19,col="gray",label=F)
orditorp(rda.dec,display="species",col="forestgreen")
text(rda.dec,display="bp",select=c(T,F,T,rep(F,32)),labels=c("ASPECT","ELEVATION","DEC",rep("DISTANCE",32)))
ASPECT
ELEVATION
ELE
text(rda.dec,display="bp")
c(T,F,T,rep(F,32))
labels=c("ASPECT","ELEVATION","DEC",rep("DISTANCE",32))
labels
text(rda.dec,display="bp",select=c(T,F,T,rep(F,32)),labels=c("ASPECT","DEC"))
text(rda.dec,display="bp",select=c(T,F,T,rep(F,32)),labels=c("ASPECT","ELEVATION","DEC",rep("DISTANCE",32)))
text(rda.dec,display="bp",select=c(T,F,T,rep(F,32)),labels=c("ASPECT","ELEVATION","DEC",rep("DISTANCE",31)))
text(rda.dec,display="bp",select=c(T,F,T,rep(F,32)),label=c("ASPECT","ELEVATION","DEC",rep("DISTANCE",32)))
text(rda.dec,display="bp",select=c(T,F,T,rep(F,32)),labels=c("ASPECT","ELEVATION","DEC",rep("DISTANCE",32)))
rda.dec
clim.sub<-clim.all[,c(2,6,8,10:13,16,17,19)]
colnames(clim.sub)<-c("DEM", "TOPOID","TPI","PLP","AET","CWD","PET", "MIN.T","MAX.T","SM")
test<-princomp(clim.sub, cor=T)
par(mar=c(4,3,4,3))
biplot(test, cex=.7,col=c("black","forestgreen"))
par(mar=c(5.1, 4.1, 4.1, 5.1))
score.test<-as.data.frame(scores(test))
ASPECT<-score.test$Comp.1
ELE<-score.test$Comp.2
rda.dec<-capscale(tr ~ ASPECT + ELE + DEC + (scores(pcnm(distance))),distance="bray",sqrt.dist = TRUE)
summary(rda.dec)
anova(rda.dec, by = "term", permu = 10000)
rda.dec.R<-RsquareAdj(rda.dec)
ordiplot(rda.dec,type="n")
orditorp(rda.dec,display="sites",pch=19,col="gray",label=F)
orditorp(rda.dec,display="species",col="forestgreen")
text(rda.dec,display="bp",select=c(T,F,T,rep(F,32)),labels=c("ASPECT","ELEVATION","DEC",rep("DISTANCE",32)))
rda.dec.sj<-capscale(seju~ASPECT+ELE+TR.BA+DEC+scores(pcnm(distance)),distance="bray",sqrt.dist = TRUE)
summary(rda.dec.sj)
anova(rda.dec.sj, by = "term", permu = 10000000)
rda.dec.sj.R<-RsquareAdj(rda.dec.sj)
rda.dec.sj.R
ordiplot(rda.dec.sj,type="n")
orditorp(rda.dec.sj,display="sites",pch=19,col="gray",label=F)
orditorp(rda.dec.sj,display="species",col="forestgreen")
text(rda.dec.sj,display="bp",select=c(F,T,T,T,T, rep(F,31)),labels =c("ASPECT","ELEVATION","BA","DEC",rep("DISTANCE",32)))
text(rda.dec.sj,display="bp",select=c(T,F,T,T,rep(F,32)),labels =c("ASPECT","ELEVATION","BA","DEC",rep("DISTANCE",32)))
tr.sub<-subset(tr, select=species.of.interest)
seju.sub<-subset(seju, select=species.of.interest)
tr.nmds<-metaMDS(tr.sub,distance="bray")
tr.adonis<-adonis(tr.sub ~ ASPECT+ELE+DEC, methods="bray", permutations=10000)
tr.adonis
ordiplot(tr.nmds ,type="n")
orditorp(tr.nmds, display="sites", pch=19, label=F, col="lightgrey")
ordisurf(tr.nmds, clim$CWD, col="black", add=T)
orditorp(tr.nmds,display="species",col="darkgreen")
ordisurf(tr.nmds,ASPECT, col="black", add=T)
ordiplot(tr.nmds ,type="n")
orditorp(tr.nmds, display="sites", pch=19, label=F, col="lightgrey")
ordisurf(tr.nmds,ASPECT, col="black", add=T)
orditorp(tr.nmds,display="species",col="darkgreen")
seju.nmds<-metaMDS(seju.sub, distance="bray")
sj.adonis<-adonis(seju.sub~ ASPECT+ELE+TR.BA+DEC, methods="bray", permutations=10000)
sj.adonis
ordiplot(seju.nmds,type="n")
orditorp(seju.nmds, display="sites", pch=19, label=F, col="lightgrey")
ordisurf(seju.nmds, clim$ELE, col="black", add=T)
ordisurf(seju.nmds, clim$ELE, col="black", add=T)
ordiplot(seju.nmds,type="n")
orditorp(seju.nmds, display="sites", pch=19, label=F, col="lightgrey")
ordisurf(seju.nmds, clim$ELE, col="black", add=T)
ordisurf(seju.nmds, ELE, col="black", add=T)
orditorp(seju.nmds,display="species",col="forestgreen")
ordisurf(seju.nmds, ASPECT, col="black", add=T)
ordiplot(seju.nmds,type="n")
orditorp(seju.nmds, display="sites", pch=19, label=F, col="lightgrey")
ordisurf(seju.nmds, ASPECT, col="black", add=T)
orditorp(seju.nmds,display="species",col="forestgreen")
names(tr.sub) <- paste0(names(tr.sub), "tr")
names(seju.sub) <- paste0(names(seju.sub), "seju")
tr.seju <- data.frame(tr.sub, seju.sub)
fit1<-lm(QUEGARtr~ASPECT+ELE,data=tr.seju); summary(fit1)
fit2<-lm(QUEDOUtr~ASPECT+ELE,data=tr.seju); summary(fit2)
fit3<-lm(QUEAGRtr~ASPECT+ELE,data=tr.seju); summary(fit3)
fit4<-lm(QUEKELtr~ASPECT+ELE,data=tr.seju); summary(fit4)
fit5<-lm(PSEMENtr~ASPECT+ELE,data=tr.seju); summary(fit5)
fit6<-lm(UMBCALtr~ASPECT+ELE,data=tr.seju); summary(fit5)
tr.seju.freq<-tr.seju
tr.seju.freq[tr.seju.freq>0]<-1
fit7<-glm(QUEGARtr~ASPECT+ELE,data=tr.seju.freq, family="binomial"); summary(fit7)
fit8<-glm(QUEDOUtr~ASPECT+ELE,data=tr.seju.freq, family="binomial"); summary(fit8)
fit9<-glm(QUEAGRtr~ASPECT+ELE,data=tr.seju.freq, family="binomial"); summary(fit9)
fit10<-glm(QUEKELtr~ASPECT+ELE,data=tr.seju.freq, family="binomial"); summary(fit10)
fit11<-glm(PSEMENtr~ASPECT+ELE,data=tr.seju.freq, family="binomial"); summary(fit11)
fit12<-glm(UMBCALtr~ASPECT+ELE,data=tr.seju.freq, family="binomial"); summary(fit12)
tr.seju$QUEGARtr<-rescale(tr.seju$QUEGARtr)
tr.seju$QUEAGRtr<-rescale(tr.seju$QUEAGRtr)
tr.seju$QUEKELtr<-rescale(tr.seju$QUEKELtr)
tr.seju$UMBCALtr<-rescale(tr.seju$UMBCALtr)
tr.seju$QUEDOUtr<-rescale(tr.seju$QUEDOUtr)
tr.seju$PSEMENtr<-rescale(tr.seju$PSEMENtr)
tr.seju$ASPECT<-ASPECT
tr.seju$ELE<-ELE
QuantileFigure<-function(seju,tr, asp=ASPECT,ele=ELE, title,percentiles=c(0,1/6,2/6,3/6,4/6,5/6,6/6), model.type="zero.inflated",tr.quant)
{
if (model.type=="zero.inflated"){
fit<-zeroinfl(seju ~ asp*ele*tr,data=tr.seju)
}
else{
fit<- glm(seju ~ asp * ele*tr, data=tr.seju, family="poisson")
}
print(summary(fit))
print(AICc(fit))
print(summary(fit)$adj.r.squared)
ele.vals <- quantile(ele,percentiles)
getXY <- function(ele.min,ele.max,ele.val,tq=tr.quant)
{
theRange <- range(asp[ele >= ele.min & ele<=ele.max])
theSeq <- seq(from=min(theRange), to=max(theRange), by=.01)
df <- data.frame(ele=ele.val,asp=theSeq,tr=quantile(tr,tq))
df$preds<- predict(fit,newdata=df,type="response")
return(df)
}
df1 <- getXY(ele.min=ele.vals[1],ele.max = ele.vals[3],ele.val=ele.vals[2])
df2 <- getXY(ele.min=ele.vals[3], ele.max = ele.vals[5],ele.val=ele.vals[4])
df3 <- getXY(ele.min=ele.vals[5],ele.max=ele.vals[7],ele.val=ele.vals[6])
colors<-c("blue","purple","red")
quant<-rep(0, length = 50)
quant[ele >= ele.vals[1] & ele<=ele.vals[3]]<-1
quant[ele>ele.vals[3] & ele <= ele.vals[5]]<-2
quant[ele>ele.vals[5]]<-3
plot(x = asp, y = seju, pch = 19, xlab = "ASPECT-AXIS", ylab = "SEEDLING COUNT",main=title,col=colors[quant])
lines(x = df1$asp, y=df1$preds, col =colors[1], lwd=3)
lines(x = df2$asp, y=df2$preds, col =colors[2], lwd=3)
lines(x = df3$asp, y=df3$preds, col =colors[3], lwd=3)
}
QuantileFigure(tr=tr.seju$QUEAGRtr,seju=tr.seju$QUEAGRseju, title="QUEAGR",tr.quant=.1)
QuantileFigure(tr=tr.seju$QUEAGRtr,seju=tr.seju$QUEAGRseju, title="QUEAGR",tr.quant=.5)
QuantileFigure(tr=tr.seju$UMBCALtr,seju=tr.seju$UMBCALseju, title="UMBCAL",model.type="glm",tr.quant=.5)
QuantileFigure(tr=tr.seju$QUEDOUtr,seju=tr.seju$QUEDOUseju, title="QUEDOU",model.type="glm",tr.quant=.1)
QuantileFigure(tr=tr.seju$QUEAGRtr,seju=tr.seju$QUEAGRseju, title="QUEAGR", model.type="glm",tr.quant=.1)
QuantileFigure(tr=tr.seju$QUEAGRtr,seju=tr.seju$QUEAGRseju, title="QUEAGR", model.type="glm",tr.quant=.5)
QuantileFigure(tr=tr.seju$QUEAGRtr,seju=tr.seju$QUEAGRseju, title="QUEAGR", model.type="glm",tr.quant=.9)
tr=tr.seju$QUEAGRtr
seju=tr.seju$QUEAGRseju, title="QUEAGR"
seju=tr.seju$QUEAGRseju
title="QUEAGR"
tr.quant=.1
asp=ASPECT
ele=ELE
fit<- glm(seju ~ asp * ele*tr, data=tr.seju, family="poisson")
print(summary(fit))
print(AICc(fit))
fit<- glm(seju ~ tr, data=tr.seju, family="poisson")
print(summary(fit))
print(AICc(fit))
fit<- glm(seju ~ asp, data=tr.seju, family="poisson")
print(summary(fit))
print(AICc(fit))
fit<- glm(seju ~ ele, data=tr.seju, family="poisson")
print(summary(fit))
print(AICc(fit))
fit<- glm(seju ~ tr+asp, data=tr.seju, family="poisson")
print(AICc(fit))
print(summary(fit))
fit<- glm(seju ~ tr+ele, data=tr.seju, family="poisson")
print(summary(fit))
print(AICc(fit))
fit<- glm(seju ~ asp+ele, data=tr.seju, family="poisson")
print(AICc(fit))
fit<- glm(seju ~ asp*ele, data=tr.seju, family="poisson")
print(AICc(fit))
fit<- glm(seju ~ tr*ele, data=tr.seju, family="poisson")
print(summary(fit))
print(AICc(fit))
fit<- glm(seju ~ tr*asp, data=tr.seju, family="poisson")
print(AICc(fit))
fit<- glm(seju ~ asp+tr*ele, data=tr.seju, family="poisson")
print(summary(fit))
print(AICc(fit))
fit<- glm(seju ~ asp*tr*ele, data=tr.seju, family="poisson")
print(summary(fit))
print(AICc(fit))
print(summary(fit)$adj.r.squared)
tr.sub
tr.ele<-cbind(tr.sub,ELE)
seju.ele<-cbind(seju.sub,ELE)
tr.index<-apply(tr.ele[ , 1:6], MARGIN = 2, FUN = function(x) which(x > 0))
tr.ele
tr.list<-lapply(tr.index,FUN=function (x) tr.ele[x,"ELE"])
sj.index<-apply(seju.ELE[ , 1:6], MARGIN = 2, FUN = function(x) which(x > 0))
sj.index<-apply(seju.ele[ , 1:6], MARGIN = 2, FUN = function(x) which(x > 0))
sj.list<-lapply(sj.index,FUN=function (x) seju.ele[x,"ELE"])
tr.list
boxplot(sj.list,las=2,col="gray", boxwex =.3,horizontal = T, at = seq(.75,10.75,length=6), yaxt="n")
boxplot(tr.list,las=2,add=T, col="red",boxwex =.3, horizontal = T, at = seq(1.25,11.25, length=6), yaxt="n",xlab="Minimum Temperature")
axis(labels=species.of.interest,side=2,at=c(1,3,5,7,9,11),las=2,cex.axis=.7)
boxplot(sj.list,las=2,col="gray", boxwex =.3,horizontal = T, at = seq(.75,10.75,length=6), yaxt="n")
boxplot(tr.list,las=2,add=T, col="red",boxwex =.3, horizontal = T, at = seq(1.25,11.25, length=6), yaxt="n",xlab="Elevation-aspect")
tr.asp<-cbind(tr.sub,ASPECT)
seju.asp<-cbind(seju.sub,ASPECT)
tr.index<-apply(tr.asp[ , 1:6], MARGIN = 2, FUN = function(x) which(x > 0))
tr.list<-lapply(tr.index,FUN=function (x) tr.asp[x,"ASPECT"])
sj.index<-apply(seju.asp[ , 1:6], MARGIN = 2, FUN = function(x) which(x > 0))
sj.list<-lapply(sj.index,FUN=function (x) seju.asp[x,"ASPECT"])
boxplot(sj.list,las=2,col="gray", boxwex =.3,horizontal = T, at = seq(.75,10.75,length=6), yaxt="n")
boxplot(tr.list,las=2,add=T, col="red",boxwex =.3, horizontal = T, at = seq(1.25,11.25, length=6), yaxt="n",xlab="CWD")
axis(labels=species.of.interest,side=2,at=c(1,3,5,7,9,11),las=2,cex.axis=.7)
mtext("A",side = 3,line=1)
sj.list[1]
kruskal.test(sj.list[1],tr.list[1])
kruskal.test(list(sj.list[1],tr.list[1]))
sj.list[1]
kruskal.test(list(sj.list[2],tr.list[2]))
kruskal.test(list(sj.list[3],tr.list[3]))
kruskal.test(list(sj.list[4],tr.list[4]))
kruskal.test(list(sj.list[5],tr.list[5]))
kruskal.test(list(sj.list[6],tr.list[4]))
kruskal.test(list(sj.list[6],tr.list[6]))
tr.ele<-cbind(tr.sub,ELE)
seju.ele<-cbind(seju.sub,ELE)
tr.index<-apply(tr.ele[ , 1:6], MARGIN = 2, FUN = function(x) which(x > 0))
tr.list<-lapply(tr.index,FUN=function (x) tr.ele[x,"ELE"])
sj.index<-apply(seju.ele[ , 1:6], MARGIN = 2, FUN = function(x) which(x > 0))
sj.list<-lapply(sj.index,FUN=function (x) seju.ele[x,"ELE"])
boxplot(sj.list,las=2,col="gray", boxwex =.3,horizontal = T, at = seq(.75,10.75,length=6), yaxt="n")
boxplot(tr.list,las=2,add=T, col="red",boxwex =.3, horizontal = T, at = seq(1.25,11.25, length=6), yaxt="n",xlab="Elevation-aspect")
axis(labels=species.of.interest,side=2,at=c(1,3,5,7,9,11),las=2,cex.axis=.7)
mtext("B",side = 3,line = 1)
kruskal.test(list(sj.list[1],tr.list[1]))
kruskal.test(list(sj.list[2],tr.list[2]))
kruskal.test(list(sj.list[3],tr.list[3]))
kruskal.test(list(sj.list[4],tr.list[4]))
kruskal.test(list(sj.list[5],tr.list[5]))
kruskal.test(list(sj.list[6],tr.list[6]))
plot(x = asp, y = seju, pch = 19, xlab = "ASPECT-AXIS", ylab = "SEEDLING COUNT",main=title,col=colors[quant])
quant=.5
plot(x = asp, y = seju, pch = 19, xlab = "ASPECT-AXIS", ylab = "SEEDLING COUNT",main=title,col=colors[quant])
lines(x = df1$asp, y=df1$preds, col =colors[1], lwd=3)
lines(x = df2$asp, y=df2$preds, col =colors[2], lwd=3)
lines(x = df3$asp, y=df3$preds, col =colors[3], lwd=3)
summary(lm(ASPECT~CWD))
summary(lm(ASPECT~clim.sub$CWD))
summary(lm(ASPECT~clim.sub$AET))
summary(lm(ASPECT~clim.sub$PET))
summary(lm(ASPECT~clim.sub$MAX.T))
summary(lm(ASPECT~clim.sub$MIN.T))
summary(lm(ASPECT~clim.sub$SM))
summary(lm(ASPECT~clim.sub$DEM))
summary(lm(ASPECT~clim.sub$TPI))
summary(lm(ASPECT~clim.sub$TOPOID))
summary(lm(ASPECT~clim.sub$PLP))
summary(lm(ASPECT~clim.sub$DEM))
summary(lm(ELE~clim.sub$DEM))
summary(lm(ELE~clim.sub$TOPOID))
summary(lm(ELE~clim.sub$TPI))
summary(lm(ELE~clim.sub$PLP))
summary(lm(ELE~clim.sub$MIN.T))
summary(lm(ELE~clim.sub$MAX.T))
summary(lm(ELE~clim.sub$SM))
summary(lm(ELE~clim.sub$CWD)) # for ELE, not MAX.T
summary(lm(ELE~clim.sub$AET)) # for ELE, not MAX.T
summary(lm(ELE~clim.sub$PET)) # for ELE, everything but MAX.T, CWD
summary(lm(ELE~clim.sub$CWD)) # for ELE, everything but MAX.T, CWD
pairs(clim.sub)
pairs(cbind(clim.sub,ELE,ASPECT))
capscale
rda.dec<-capscale(tr ~ ASPECT + ELE + Condition(DEC) + Condition(scores(pcnm(distance))),distance="bray",sqrt.dist = TRUE)
rda.dec<-capscale(tr ~ ASPECT + ELE + Condition(DEC) + (scores(pcnm(distance))),distance="bray",sqrt.dist = TRUE)
tr
ASPECT
ELE
DEC
(scores(pcnm(distance))
)
rda.dec<-capscale(tr ~ ASPECT + ELE + (scores(pcnm(distance))) + Condition(DEC), distance="bray",sqrt.dist = TRUE)
x
tr
ASPECT
distance
pcnm(distance)
scores(pcnm(distance))
Condition(DEC)
rda.dec<-capscale(tr ~ ASPECT + ELE + (scores(pcnm(distance))) + condition(DEC), distance="bray",sqrt.dist = TRUE)
rda.dec<-capscale(tr ~ ASPECT + ELE + (scores(pcnm(distance))), distance="bray",sqrt.dist = TRUE)
distance<- dist(clim[,11:12])
rda.dec<-capscale(tr ~ ASPECT + ELE + (scores(pcnm(distance)))+ Condition(DEC), distance="bray",sqrt.dist = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# Intent: Compile and Plot TBC3 Veg Plot
# Author: M.F. Oldfather
# Date created: 20151208
# Last edited: 20151209
# clear workspace
rm(list=ls())
#Packages
library("RCurl")
library("data.table")
library("plotrix")
# sources in all PW functions
source_https <- function(url, ...) {
# parse and evaluate each .R script
sapply(c(url, ...), function(u) {
eval(parse(text = getURL(u, followlocation = TRUE, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))), envir = .GlobalEnv)
})
}
source_https('https://raw.githubusercontent.com/dackerly/PepperwoodVegPlots/master/Analyses/PWfunctions_GitHub.R')
# set working directory, this should be a folder that contains a folder for each plot; not yet put up on GitHub
setwd("Pepperwood/HOBO Raw/HOBO Raw Data 20150820/")
# create a list of the plot numbers
plot.list<-as.character(c(1301:1350))
# read in all files --> make a 50 vector list in which each element is a list of the files
biglist<-vector(mode="list", length=50)
names(biglist)<-plot.list
for (i in 1:50){
direct<-dir()[i]
temp <-list.files(direct,pattern="*.csv")
sublist<-lapply(paste(direct,"/",temp,sep=""), read.csv,skip=2,header=F)
biglist[[i]]<-sublist
}
#look at biglist
str(biglist)
# makes each list element condense so each plot is a single dataframe
sublist<-vector(mode="list", length=50)
names(sublist)<-plot.list
for (i in 1:50){
sub<-biglist[[i]]
sub<-lapply(sub, function(x) x[,2:4])
sub<-as.data.frame(do.call(rbind, sub))
colnames(sub)<-c("Date.Time","Temp","RH")
sublist[[i]]<-sub
}
# look at sublist, each dataframe has 2 columns
str(sublist)
head(sublist[1][[1]])
# make the Date.Time column into a readable format`
for (i in 1:50){
sub<-sublist[[i]]
ts<-as.POSIXct(sub[,1],format = "%m/%d/%Y %r")
sublist[[i]][,1]<- ts
}
for(i in 1:50){
sublist[[i]]$Plot<-names(sublist[i])
}
head(sublist[1][[1]])
not.a.list<-do.call(rbind,sublist)
head(not.a.list)
tail(not.a.list)
str(not.a list)
str(not.a list)
str(not.a.list)
as.data.frame(sublist)
str(sublist)
head(sublist[1][[1]])
sublist<-vector(mode="list", length=50)
names(sublist)<-plot.list
for (i in 1:50){
sub<-biglist[[i]]
sub<-lapply(sub, function(x) x[,2:4])
sub<-as.data.frame(do.call(rbind, sub))
colnames(sub)<-c("Date.Time","Temp","RH")
sublist[[i]]<-sub
}
str(sublist)
head(sublist[1][[1]])
for (i in 1:50){
sub<-sublist[[i]]
ts<-as.POSIXct(sub[,1],format = "%m/%d/%Y %r")
sublist[[i]][,1]<- ts
}
head(sublist[1][[1]])
sublist<-vector(mode="list", length=50)
names(sublist)<-plot.list
for (i in 1:50){
sub<-biglist[[i]]
sub<-lapply(sub, function(x) x[,2:4])
sub<-as.data.frame(do.call(rbind, sub))
colnames(sub)<-c("Date.Time","Temp","RH")
sublist[[i]]<-sub
}
# look at sublist, each dataframe has 2 columns
str(sublist)
head(sublist[1][[1]])
# make the Date.Time column into a readable format`
for (i in 1:50){
sub<-sublist[[i]]
ts<-as.POSIXct(sub[,1],format = "%m/%d/%y %r")
sublist[[i]][,1]<- ts
}
head(sublist[1][[1]])
only2014<-lapply(sublist, function(x) subset(x,(format(x$Date.Time, "%y")) == "2014"))
str(only2014)
head(sublist[1][[1]])
head(not.a.list)
rownames(not.a.list)<-NULL
head(not.a.list)
dim(not.a.list)
sublist
only2014<-lapply(sublist, function(x) subset(x,(format(x$Date.Time, "%y")) == "2014"))
str(only2014)
only2014<-lapply(sublist, function(x) subset(x,(format(x$Date.Time, "%Y")) == "2014"))
str(only2014)
for (i in 1:50){
sub<-sublist[[i]]
ts<-as.POSIXct(sub[,1],format = "%m/%d/%y %r")
sublist[[i]][,1]<- ts
}
